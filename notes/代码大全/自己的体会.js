自己的一些体会
P80
噢，对对对，我自己写的时候老是想着，怎么能写简洁，但是，这还没解决就想简洁，违背自然规律啊。。本末倒置了。。况且，有些情况就是很复杂的，比如最近写的那个判断两个对象相等的函数，要考虑到键值对的值里是数组或者又是对象，所以里头就是有比较多的 if /else if。
还有之前写的表单验证逻辑，就是有这么多的情况需要判断，可能顶多就只能用表驱动法抽出来，我晚点抽出来看看，看抽出来之后，容不容易理解了。。

P94
隐藏设计决策对于减少“改动所影响的代码量”而言是至关重要的
需要隐藏的：创建新 Id，以及 id 的类型，都需要隐藏。
用一个函数封装起来，比如 newId() 这样的，把新建 id 的方法或者 id 是什么类型都藏到函数里。
而不是暴露出来，导致一改的时候，到处都要改。。

P102
语义耦合的例子 看着就不舒服，自己写的时候也该尽力去避免。

P103
每个人都曾经自己写过几次快速排序算法，但你自己写的版本一写就对的可能性有多少呢？与之相似，大量的设计问题都与就有问题相关

P105
构造分层结构，大概需要合理运用 思维导图（试试百度脑图）

P118
本章前面的图 5-6 在 P88

P136
“因为它支持多态”，对多态的解释在 P91

P139
这里提到封装。又提到 5.3 里的论述，发现倒回去看关于封装的比喻又有新的体会，怪不得大牛把代码大全这本书看了四遍，果然，该多翻

P139
这里说到“某个子程序的可访问性应该设为公用（public）、私用（private）、抑或受保护（protected）时”，看到这个 protected 想起之前在 mdn 看了个啥东西是 protected 的，一时记不起来是啥了。。。而且红皮书上也有的。。啊，是啥啊。。忘记了。。看完代码大全再重新看红皮书，应该能想起来。。

P139
尽可能地限制类和成员的可访问性
这里的意思大概是，1、如果你能确定保证抽象的一致性的话，就可以暴露某个子程序；2、但如果你不确定，那多隐藏比少隐藏好

P140
代码里讲了暴露类内部细节是怎么样的，隐藏又是怎么样的

P141
隐藏细节、不对使用者做假设（大概就是不要去考虑边边角角的东西）、管理复杂度、抽象一致性、不要为了贪图一时方便（而降低代码可读性/而违反抽象一致性/而破坏封装/而暴露细节）、注意语义封装和语法封装

P143
这里建议要把数据声明为 private 而不是 protected；
噢，原来高耦合总是发生在抽象不严谨和封装性遭到破坏的时候啊。。那言下之意还是，必须保证好封装性和抽象。。
这里又提到黑盒子。。前面的内容也看到过，当时就想起 sicp 那个视频了。。

P143
在万不得已时通过 private 继承来实现“有一个”的关系。这段比较难懂，但大概猜测，意思是，A 对象为了包含 B 对象，就通过 private 继承，让 A 对象所在的类能访问 B 对象所在的类的 protected 函数方法和数据（但我这个理解有可能是错的）

P151
这里提到深拷贝和浅拷贝，之前接触过这个，但是一直不太理解， mark 一下，今晚回去看看 lodash 对这个的实现。
